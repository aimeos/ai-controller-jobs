<?php

/**
 * @license LGPLv3, http://opensource.org/licenses/LGPL-3.0
 * @copyright Aimeos (aimeos.org), 2020-2023
 * @package Controller
 * @subpackage Common
 */


namespace Aimeos\Controller\Common\Product\Import\Csv\Processor\Supplier;


/**
 * Supplier processor for CSV imports
 *
 * @package Controller
 * @subpackage Common
 */
class Standard
	extends \Aimeos\Controller\Common\Product\Import\Csv\Processor\Base
	implements \Aimeos\Controller\Common\Product\Import\Csv\Processor\Iface
{
	/** controller/common/product/import/csv/processor/supplier/name
	 * Name of the supplier processor implementation
	 *
	 * Use "Myname" if your class is named "\Aimeos\Controller\Common\Product\Import\Csv\Processor\Supplier\Myname".
	 * The name is case-sensitive and you should avoid camel case names like "MyName".
	 *
	 * @param string Last part of the processor class name
	 * @since 2020.07
	 */

	private \Aimeos\Controller\Common\Product\Import\Csv\Cache\Supplier\Standard $cache;
	private ?array $listTypes = null;


	/**
	 * Initializes the object
	 *
	 * @param \Aimeos\MShop\ContextIface $context Context object
	 * @param array $mapping Associative list of field position in CSV as key and domain item key as value
	 * @param \Aimeos\Controller\Common\Product\Import\Csv\Processor\Iface $object Decorated processor
	 */
	public function __construct( \Aimeos\MShop\ContextIface $context, array $mapping,
		\Aimeos\Controller\Common\Product\Import\Csv\Processor\Iface $object = null )
	{
		parent::__construct( $context, $mapping, $object );

		/** controller/common/product/import/csv/processor/supplier/listtypes
		 * Names of the supplier list types that are updated or removed
		 *
		 * Aimeos offers associated items like "bought together" suppliers that
		 * are automatically generated by other job controllers. These relations
		 * shouldn't normally be overwritten or deleted by default during the
		 * import and this confiuration option enables you to specify the list
		 * types that should be updated or removed if not available in the import
		 * file.
		 *
		 * Contrary, if you don't generate any relations automatically in the
		 * shop and want to import those relations too, you can set the option
		 * to null to update all associated items.
		 *
		 * @param array|null List of supplier list type names or null for all
		 * @since 2020.07
		 * @see controller/common/product/import/csv/domains
		 * @see controller/common/product/import/csv/processor/attribute/listtypes
		 * @see controller/common/product/import/csv/processor/supplier/listtypes
		 * @see controller/common/product/import/csv/processor/media/listtypes
		 * @see controller/common/product/import/csv/processor/price/listtypes
		 * @see controller/common/product/import/csv/processor/text/listtypes
		 */
		$key = 'controller/common/product/import/csv/processor/supplier/listtypes';
		$this->listTypes = $context->config()->get( $key, ['default', 'promotion'] );

		if( $this->listTypes === null )
		{
			$this->listTypes = [];
			$manager = \Aimeos\MShop::create( $context, 'product/lists/type' );

			$search = $manager->filter()->slice( 0, 0x7fffffff );
			$search->setConditions( $search->compare( '==', 'product.lists.type.domain', 'supplier' ) );

			foreach( $manager->search( $search ) as $item ) {
				$this->listTypes[$item->getCode()] = $item->getCode();
			}
		}
		else
		{
			$this->listTypes = array_combine( $this->listTypes, $this->listTypes );
		}

		$this->cache = $this->getCache( 'supplier' );
	}


	/**
	 * Saves the supplier related data to the storage
	 *
	 * @param \Aimeos\MShop\Product\Item\Iface $product Product item with associated items
	 * @param array $data List of CSV fields with position as key and data as value
	 * @return array List of data which has not been imported
	 */
	public function process( \Aimeos\MShop\Product\Item\Iface $product, array $data ) : array
	{
		$context = $this->context();
		$manager = \Aimeos\MShop::create( $context, 'product' );
		$separator = $context->config()->get( 'controller/common/product/import/csv/separator', "\n" );

		$listMap = [];
		$map = $this->getMappedChunk( $data, $this->getMapping() );
		$listItems = $product->getListItems( 'supplier', $this->listTypes, null, false );

		foreach( $listItems as $listItem )
		{
			if( $refItem = $listItem->getRefItem() ) {
				$listMap[$refItem->getCode()][$listItem->getType()] = $listItem;
			}
		}

		foreach( $map as $list )
		{
			if( $this->checkEntry( $list ) === false ) {
				continue;
			}

			$listtype = trim( $this->val( $list, 'product.lists.type', 'default' ) );
			$this->addType( 'product/lists/type', 'supplier', $listtype );

			$listConfig = $this->getListConfig( trim( $this->val( $list, 'product.lists.config', '' ) ) );
			$codes = explode( $separator, trim( $this->val( $list, 'supplier.code', '' ) ) );
			unset( $list['supplier.code'], $list['product.lists.config'] );

			foreach( $codes as $code )
			{
				$code = trim( $code );

				$supItem = $this->getSupplierItem( $code );
				$supItem = $supItem->fromArray( $list )->setCode( $code );

				$listItem = $listMap[$code][$listtype] ?? $manager->createListItem();
				$listItem = $listItem->fromArray( $list )->setConfig( $listConfig );

				$product->addListItem( 'supplier', $listItem->setType( $listtype ), $supItem );

				unset( $listItems[$listItem->getId()] );
			}
		}

		$product->deleteListItems( $listItems );

		return $this->object()->process( $product, $data );
	}


	/**
	 * Checks if an entry can be used for updating a media item
	 *
	 * @param array $list Associative list of key/value pairs from the mapping
	 * @return bool True if valid, false if not
	 */
	protected function checkEntry( array $list ) : bool
	{
		if( $this->val( $list, 'supplier.code' ) === null ) {
			return false;
		}

		if( ( $type = trim( $this->val( $list, 'product.lists.type', '' ) ) ) && !isset( $this->listTypes[$type] ) )
		{
			$msg = sprintf( 'Invalid type "%1$s" (%2$s)', $type, 'product list' );
			throw new \Aimeos\Controller\Common\Exception( $msg );
		}

		return true;
	}


	/**
	 * Returns the supplier item for the given code and type
	 *
	 * @param string $code Supplier code
	 * @return \Aimeos\MShop\Supplier\Item\Iface Supplier item object
	 */
	protected function getSupplierItem( string $code ) : \Aimeos\MShop\Supplier\Item\Iface
	{
		if( ( $item = $this->cache->get( $code ) ) === null )
		{
			$manager = \Aimeos\MShop::create( $this->context(), 'supplier' );

			$item = $manager->create()
				->setLabel( $code )
				->setCode( $code )
				->setStatus( 1 );

			$item = $manager->save( $item );

			$this->cache->set( $item );
		}

		return $item;
	}
}
